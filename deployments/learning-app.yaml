apiVersion: v1
kind: Namespace
metadata:
  name: learning

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: learning
data:
  APP_ENV: "development"
  API_URL: "http://api-service:8080"
  LOGGING_LEVEL: "debug"

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: learning
type: Opaque
data:
  # These are placeholders - NEVER commit real credentials!
  # In production, use tools like Vault or generated secrets
  DATABASE_PASSWORD: UkVQTEFDRV9USEFUX1dJVEhfUkVBTF9QQVNTV09SRA==  # REPLACE_THAT_WITH_REAL_PASSWORD
  API_KEY: UkVQTEFDRV9USEFUX1dJVEhfUkVBTF9BUElfS0VZ  # REPLACE_THAT_WITH_REAL_API_KEY

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data
  namespace: learning
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: learning
  labels:
    app: web-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - name: web-app
        image: nginx:1.21.0
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 2
        volumeMounts:
        - name: app-data
          mountPath: /usr/share/nginx/html
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: APP_ENV
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: API_URL
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_PASSWORD
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data

---
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
  namespace: learning
spec:
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: learning
  labels:
    app: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: database
        image: postgres:13
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "128Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DATABASE_PASSWORD
        - name: POSTGRES_DB
          value: "appdb"
        - name: POSTGRES_USER
          value: "appuser"
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "appuser"]
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "appuser"]
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: learning
spec:
  selector:
    app: database
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP